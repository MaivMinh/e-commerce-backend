services:

  axon-server:
    image: axoniq/axonserver
    ports:
      - "8024:8024"
      - "8124:8124"
    networks:
      - e-commerce
    volumes:
      - "/Users/mainga/data/axonserver/data:/axonserver/data"
      - "/Users/mainga/data/axonserver/events:/axonserver/events"
      - "/Users/mainga/data/axonserver/config:/axonserver/config"
    restart: unless-stopped


  kafka:
    image: docker.io/bitnami/kafka:3.9
    ports:
      - "9092:9092"
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - "/Users/mainga/data/kafka:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  

  config-server:
    image: config-server:1.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: "curl --fail --silent http://localhost:8071/actuator/health/readiness | grep UP || exit 1"  # Kiểm tra xem config-server có sẵn sàng không. Khi response của curl là UP thì coi như config-server đã sẵn sàng.
      interval: 10s # Khoảng thời gian giữa các lần thử lại.
      retries: 10 # Nếu không có response hoặc response không phải là UP thì sẽ thử lại 10 lần.
      timeout: 5s # Với mỗi lần thử, nếu sau 5s mà không có response thì sẽ coi là không thành công.
      start_period: 30s # Sau 15s kể từ khi start thì mới bắt đầu kiểm tra healthcheck
    ports:
      - "8071:8071"
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 400M
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD=${SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD}
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092

  service-discovery:
    image: service-discovery:1.0
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent http://localhost:8761/actuator/health/readiness | grep UP || exit 1"  # Kiểm tra xem config-server có sẵn sàng không. Khi response của curl là UP thì coi như config-server đã sẵn sàng.
      interval: 10s # Khoảng thời gian giữa các lần thử lại.
      retries: 10 # Nếu không có response hoặc response không phải là UP thì sẽ thử lại 10 lần.
      timeout: 5s # Với mỗi lần thử, nếu sau 5s mà không có response thì sẽ coi là không thành công.
      start_period: 30s # Sau 30s kể từ khi start thì mới bắt đầu kiểm tra healthcheck
    networks:
      - e-commerce
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_APPLICATION_NAME=service-discovery
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 400M

  redis-service:
    image: redis:7.4
    restart: unless-stopped
    networks:
      - e-commerce
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          memory: 400M
  api-gateway:
    image: api-gateway:1.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      retries: 10
      timeout: 5s
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 400M
    ports:
      - "8080:8080"
    depends_on:
      service-discovery:
        condition: service_healthy
      config-server:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_APPLICATION_NAME=api-gateway
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - SPRING_DATA_REDIS_HOST=redis-service
      - SPRING_DATA_REDIS_PORT=6379
      - GRPC_SERVER_AUTH_SERVICE_ADDRESS=static://auth-service:9093
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092

  auth-db-service:
    image: mysql:8.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 15s
    env_file:
      - .env
    environment:
      - MYSQL_DATABASE=ecommerce_auth
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3305:3306"
    volumes:
      - /Users/mainga/data/auth-db:/var/lib/mysql

  # =======================
  # Authentication Service
  # =======================
  auth-service:
    image: auth-service:1.0
    networks:
      - e-commerce
    deploy:
      resources:
        limits:
          memory: 512M
    restart: on-failure
    env_file:
      - .env
    ports:
      - "9093:9093"
      - "8083:8083"
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      auth-db-service:
        condition: service_healthy
    environment:
      - SPRING_APPLICATION_NAME=auth-service
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - SPRING_APPLICATION_SECURITY_JWT_ACCESS_TOKEN_KEY=${SPRING_APPLICATION_SECURITY_JWT_ACCESS_TOKEN_KEY}
      - SPRING_APPLICATION_SECURITY_JWT_REFRESH_TOKEN_KEY=${SPRING_APPLICATION_SECURITY_JWT_REFRESH_TOKEN_KEY}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - SPRING_DATA_REDIS_HOST=redis-service
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_CACHE_TYPE=redis
      - SPRING_SQL_INIT_MODE=never
      - SPRING_DATASOURCE_URL=jdbc:mysql://auth-db-service:3306/ecommerce_auth
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092


  cart-db-service:
    image: mysql:8.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 15s
    env_file:
      - .env
    environment:
      - MYSQL_DATABASE=ecommerce_cart
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - /Users/mainga/data/cart-db:/var/lib/mysql

  # =======================
  # Cart Service
  # =======================
  cart-service:
    image: cart-service:1.0
    networks:
      - e-commerce
    deploy:
      resources:
        limits:
          memory: 512M
    restart: on-failure
    ports:
      - "8082:8082"
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      cart-db-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_APPLICATION_NAME=cart-service
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_CLOUDFRONT_DOMAIN=${AWS_CLOUDFRONT_DOMAIN}
      - SPRING_DATASOURCE_URL=jdbc:mysql://cart-db-service:3306/ecommerce_cart
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - GRPC_SERVER_PRODUCT_SERVICE_ADDRESS=static://product-service:9091
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092



  order-db-service:
    image: mysql:8.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 15s
    env_file:
      - .env
    environment:
      - MYSQL_DATABASE=ecommerce_order
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - /Users/mainga/data/order-db:/var/lib/mysql
  # =======================
  # Order Service
  # =======================
  order-service:
    image: order-service:1.0
    networks:
      - e-commerce
    deploy:
      resources:
        limits:
          memory: 768M
    restart: on-failure
    ports:
      - "9094:9094"
      - "8084:8084"
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      order-db-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_APPLICATION_NAME=booking-service
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq-service
      - SPRING_DATASOURCE_URL=jdbc:mysql://order-db-service:3306/ecommerce_order
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - GRPC_SERVER_USER_SERVICE_ADDRESS=static://user-service:9098
      - GRPC_SERVER_PRODUCT_SERVICE_ADDRESS=static://product-service:9091
      - AXON_AXONSERVER_SERVERS=axon-server:8124
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092

  payment-db-service:
    image: mysql:8.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 15s
    environment:
      - MYSQL_DATABASE=ecommerce_payment
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3309:3306"
    volumes:
      - /Users/mainga/data/payment-db:/var/lib/mysql
  # =======================
  # Payment Service
  # =======================
  payment-service:
    deploy:
      resources:
        limits:
          memory: 512M
    image: payment-service:1.0
    restart: on-failure
    networks:
      - e-commerce
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      payment-db-service:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_APPLICATION_NAME=payment-service
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://payment-db-service:3306/ecommerce_payment
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092
      - AXON_AXONSERVER_SERVERS=axon-server:8124



  # =======================
  # Product Service
  # =======================
  product-db-service:
    image: mysql:8.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 15s
    environment:
      - MYSQL_DATABASE=ecommerce_product
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3310:3306"
    volumes:
      - /Users/mainga/data/product-db:/var/lib/mysql

  product-service:
    deploy:
      resources:
        limits:
          memory: 768M
    image: product-service:1.0
    restart: on-failure
    networks:
      - e-commerce
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      product-db-service:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      - SPRING_APPLICATION_NAME=product-service
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://product-db-service:3306/ecommerce_product
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - AXON_AXONSERVER_SERVERS=axon-server:8124
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092



  # =======================
  # Promotion Service
  # =======================
  promotion-db-service:
    image: mysql:8.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 15s
    environment:
      - MYSQL_DATABASE=ecommerce_promotion
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3311:3306"
    volumes:
      - /Users/mainga/data/promotion-db:/var/lib/mysql

  promotion-service:
    deploy:
      resources:
        limits:
          memory: 512M
    image: promotion-service:1.0
    restart: on-failure
    networks:
      - e-commerce
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      promotion-db-service:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_APPLICATION_NAME=promotion-service
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://promotion-db-service:3306/ecommerce_promotion
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - AXON_AXONSERVER_SERVERS=axon-server:8124
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092


  # =======================
  # User Service
  # =======================
  user-db-service:
    image: mysql:8.0
    restart: on-failure
    networks:
      - e-commerce
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 15s
    environment:
      - MYSQL_DATABASE=ecommerce_user
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3312:3306"
    volumes:
      - /Users/mainga/data/user-db:/var/lib/mysql

  user-service:
    deploy:
      resources:
        limits:
          memory: 400M
    image: user-service:1.0
    restart: on-failure
    networks:
      - e-commerce
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      user-db-service:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8088:8088"
      - "9098:9098"
    environment:
      - SPRING_APPLICATION_NAME=user-service
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:mysql://user-db-service:3306/ecommerce_user
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092


  # =======================
  # File Service
  # =======================
  file-service:
    deploy:
      resources:
        limits:
          memory: 400M
    image: file-service:1.0
    restart: on-failure
    networks:
      - e-commerce
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_APPLICATION_NAME=file-service
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka/
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092


networks:
  e-commerce:
    driver: "bridge"

# =======================
# Docker Volumes
# =======================
volumes:
  auth-db-data:
    driver: local
  order-db-data:
    driver: local
  payment-db-data:
    driver: local
  user-db-data:
    driver: local
  product-db-data:
    driver: local
  cart-db-data:
    driver: local
  promotion-db-data:
    driver: local
  notification-db-data:
    driver: local
  review-db-data:
    driver: local