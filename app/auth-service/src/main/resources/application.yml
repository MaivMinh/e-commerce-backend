server:
  port: 8083
spring:
  application:
    name: auth-service
    security:
      jwt:
        access-token-key: ${SPRING_APPLICATION_SECURITY_JWT_ACCESS_TOKEN_KEY:$2a$12$iP3.JTboJiEaRDe3lLx4oOkZbBCf8Yf.7SO8UR8D8g2NWvNL3m0nu}
        refresh-token-key: ${SPRING_APPLICATION_SECURITY_JWT_REFRESH_TOKEN_KEY:$2a$12$n18UlSjsLpPQM.2B59gRxOS1oLLS5Baqk3dHIqmeFTMmrG3VF/dsu}
        access-token-expiration: 43200000
        refresh-token-expiration: 1296000000
    server:
      host: ${SPRING_APPLICATION_SERVER_HOST:http://localhost:8080}
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  config:
    import: ${SPRING_CONFIG_IMPORT:optional:configserver:http://localhost:8071/}

  cloud:
    function:
      definition: confirmUserCreatedFunction;confirmUserInactivatedFunction;confirmUserActivatedFunction
    stream:
      bindings: #  Destination bindings component là cầu nối và định nghĩa các kênh (channels) mà ứng dụng sẽ sử dụng để gửi hoặc nhận dữ liệu.

        # INPUT ZONE
        createUserFunction-out-0: # Defines an output channel (producer) configuration:
          destination: create-user  # The Kafka topic name to publish messages to
        inactiveUserFunction-out-0:
          destination: inactive-user
        activeUserFunction-out-0:
          destination: active-user

        # OUTPUT ZONE
        confirmUserCreatedFunction-in-0: # Defines an input channel (consumer) configuration:
          destination: user-created  # The Kafka topic name to consume messages from
          group: ${spring.application.name}  # The consumer group ID, ensuring messages are load-balanced across service instances
          # Điều này thể hiện việc các instance của auth-service sẽ thuộc về một nhóm là auth-service-group
          # Khi có message mới đến, nó sẽ được consume chỉ bởi một instance duy nhất trong nhóm này. Việc này giúp cân bằng tải giữa các instance của auth-service.
        confirmUserInactivatedFunction-in-0:
          destination: user-inactivated
          group: ${spring.application.name}
        confirmUserActivatedFunction-in-0:
          destination: user-activated
          group: ${spring.application.name}
      kafka:
        binder:
          brokers:
            - ${SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS:localhost:9092}



  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:}
  cache:
    type: redis
  threads:
    virtual:
      enabled: true

  # /// MYSQL DATABASE CONFIGURATION ///
  sql:
    init:
      schema-locations: classpath:schema.sql
      mode: ${SPRING_SQL_INIT_MODE:never}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/ecommerce_auth}
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${SPRING_DATASOURCE_PASSWORD:49@Da5J,[KsemDN}


management:
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        resilience4j:
          circuitbreaker:
            enabled: true
        http:
          server:
            requests:
              enabled: true

grpc:
  server:
    port: 9093

#Eureka client config.
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
      preferIpAddress: true
    register-with-eureka: true
    fetch-registry: true

#Axon configuration
logging:
  level:
    org:
      axonframework: DEBUG

bravo:
  api:
    key: ${BRAVO_API_KEY}