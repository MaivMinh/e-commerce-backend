spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  application:
    name: api-gateway
  config:
    import: ${SPRING_CONFIG_IMPORT:optional:configserver:http://localhost:8071/}
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}
  cloud:
    circuitbreaker:
      resilience4j:
        reactive:
          enabled: true
    gateway:
      routes:
        - id: api-documentation
          uri: lb://bff
          predicates:
            - Path=/api-docs/**,/v3/api-docs/**
            - Method=GET,POST,PUT,DELETE,PATCH

        - id: product-service
          uri: lb://product-service
          predicates:
            - Path=/api/products/**,/api/products,/api/categories/**,/api/categories
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - name: CircuitBreaker
              args:
                name: productService
                fallbackUri: "forward:/products/contact-support"

        - id: cart-service
          uri: lb://cart-service
          predicates:
            - Path=/api/carts/**,/api/carts
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - name: CircuitBreaker
              args:
                name: cartService
                fallbackUri: "forward:/carts/contact-support"
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/api/orders/**,/api/orders
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - name: CircuitBreaker
              args:
                name: orderService
                fallbackUri: "forward:/orders/contact-support"

        - id: payment-service
          uri: lb://payment-service
          predicates:
            - Path=/api/payments/**,/api/payments,/api/payment-methods/**,/api/payment-methods
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - name: CircuitBreaker
              args:
                name: paymentService
                fallbackUri: "forward:/payments/contact-support"

        - id: promotion-service
          uri: lb://promotion-service
          predicates:
              - Path=/api/promotions/**,/api/promotions
              - Method=GET,POST,PUT,DELETE,PATCH
          filters:
              - name: CircuitBreaker
                args:
                    name: promotionService
                    fallbackUri: "forward:/promotions/contact-support"

        - id: file-service
          uri: lb://file-service
          predicates:
            - Path=/api/files/**,/api/files
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - name: CircuitBreaker
              args:
                name: fileService
                fallbackUri: "forward:/files/contact-support"

        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/api/auth/**,/api/auth, /api/user/profile, /api/user/**
            - Method=GET,POST,PUT,DELETE,PATCH
          filters:
            - name: CircuitBreaker
              args:
                name: authService
                fallbackUri: "forward:/auth/contact-support"

      httpclient:
        connect-timeout: 1000
        response-timeout: 15s
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
  threads:
    virtual:
      enabled: true


grpc:
  client:
    authService:
      address: ${GRPC_SERVER_AUTH_SERVICE_ADDRESS:static://localhost:9093}
      negotiation-type: plaintext
      enable-keep-alive: true
      keep-alive-without-calls: true

management:
  # Cấu hình dành cho phần metrics của Spring Boot Actuator. Tìm hiểu sau.
  metrics:
    distribution:
      percentiles-histogram:
        resilience4j:
          circuitbreaker:
            enabled: true
        http:
          server:
          requests:
            enabled: true
  endpoint: # Ứng với các endpoint nào thì sẽ có các yêu cầu, thiết lập tương ứng.
    health:
      probes:
        enabled: true
      show-details: always
    loggers:
      access: unrestricted
    beans:
      cache:
        time-to-live: 10s
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    # Liveness and Readiness probes configuration.
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true


server:
  port: 8080

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
      preferIpAddress: true
    register-with-eureka: true
    fetch-registry: true

# Resilience configuration
resilience4j:
  # Just like the CircuitBreaker module, this module provides an in-memory TimeLimiterRegistry which you can use to manage (create and retrieve) TimeLimiter instances.
  # Điều này có nghĩa là TimeLimiter cũng sẽ là một Resiliency Pattern trong Resilience4j.
  # Do đó, chúng ta cũng có thể sử dụng auto-configuration của Spring Boot để tự động cấu hình cho TimeLimiter.
  timelimiter:
    instances:
      authService:
        timeoutDuration: 15s
      productService:
        timeoutDuration: 15s
      cartService:
        timeoutDuration: 15s
      orderService:
        timeoutDuration: 15s
      paymentService:
        timeoutDuration: 15s
      promotionService:
        timeoutDuration: 15s
      fileService:
        timeoutDuration: 15s

  circuitbreaker:
    instances:
      authService:
        registerHealthIndicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50
      productService:
        registerHealthIndicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50
      cartService:
        registerHealthIndicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50
      orderService:
        registerHealthIndicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50
      paymentService:
        registerHealthIndicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50
      promotionService:
        registerHealthIndicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50
      fileService:
        registerHealthIndicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 20000
        failureRateThreshold: 50