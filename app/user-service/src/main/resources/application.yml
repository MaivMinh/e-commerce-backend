server:
  port: 8088
spring:
  application:
    name: user-service
  threads:
    virtual:
      enabled: true
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  config:
    import: ${SPRING_CONFIG_IMPORT:optional:configserver:http://localhost:8071/}

  cloud:
    function:
      definition: createUserFunction;inactiveUserFunction;activeUserFunction  # Defines the function to be used in the application, which is a Spring Cloud Function.
    stream:
      bindings: #  Destination bindings component là cầu nối và định nghĩa các kênh (channels) mà ứng dụng sẽ sử dụng để gửi hoặc nhận dữ liệu.

        # INPUT ZONE
        createUserFunction-in-0: # Defines an input channel (consumer) configuration:
          destination: create-user # The Kafka topic name to consume messages from
          group: ${spring.application.name} # The consumer group ID, ensuring messages are load-balanced across service instances
          # Điều này thể hiện việc các instance của auth-service sẽ thuộc về một nhóm là auth-service-group
          # Khi có message mới đến, nó sẽ được consume chỉ bởi một instance duy nhất trong nhóm này. Việc này giúp cân bằng tải giữa các instance của auth-service.
        inactiveUserFunction-in-0:
          destination: inactive-user
          group: ${spring.application.name}
        activeUserFunction-in-0:
          destination: active-user
          group: ${spring.application.name}

        # OUTPUT ZONE
        createUserFunction-out-0: # Defines an output channel (producer) configuration:
          destination: user-created  # The Kafka topic name to publish messages to
        inactiveUserFunction-out-0:
          destination: user-inactivated
        activeUserFunction-out-0:
          destination: user-activated

      kafka:
        binder:
          brokers:
            - ${SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS:localhost:9092}


    # /// MYSQL DATABASE CONFIGURATION ///
  sql:
    init:
      schema-locations: classpath:schema.sql
      mode: ${SPRING_SQL_INIT_MODE:never}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/ecommerce_user}
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${SPRING_DATASOURCE_PASSWORD:49@Da5J,[KsemDN}

#Eureka client config.
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
      preferIpAddress: true
    register-with-eureka: true
    fetch-registry: true


# gRPC configuration
grpc:
  server:
    port: 9098

# resilience4j configuration