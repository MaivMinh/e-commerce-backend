server:
  port: 8084
spring:
  application:
    name: order-service
  threads:
    virtual:
      enabled: true
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  config:
    import: ${SPRING_CONFIG_IMPORT:optional:configserver:http://localhost:8071/}

  cloud:
    function:
      definition: handleOrderCreated;
    stream:
      bindings: #  Destination bindings component là cầu nối và định nghĩa các kênh (channels) mà ứng dụng sẽ sử dụng để gửi hoặc nhận dữ liệu.
        orderCreatedEvent-out-0:
          destination: order-created
        handleOrderCreated-in-0:
          destination: confirm-order-created
          group: ${spring.application.name}

      kafka:
        binder:
          brokers:
            - ${SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS:localhost:9092}

  # /// MYSQL DATABASE CONFIGURATION ///
  sql:
    init:
      schema-locations: classpath:schema.sql
      mode: ${SPRING_SQL_INIT_MODE:never}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/ecommerce_order}
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${SPRING_DATASOURCE_PASSWORD:49@Da5J,[KsemDN}


management:
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        resilience4j:
          circuitbreaker:
            enabled: true
        http:
          server:
            requests:
              enabled: true

#Eureka client config.
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
      preferIpAddress: true
    register-with-eureka: true
    fetch-registry: true

# gRPC Client configuration
grpc:
  client:
    user-service:
      address: ${GRPC_SERVER_USER_SERVICE_ADDRESS:static://localhost:9098}
      negotiation-type: plaintext
      enable-keep-alive: true
      keep-alive-without-calls: true
    product-service:
      address: ${GRPC_SERVER_PRODUCT_SERVICE_ADDRESS:static://localhost:9091}
      negotiation-type: plaintext
      enable-keep-alive: true
      keep-alive-without-calls: true

# resilience4j configuration
resilience4j:
  timelimiter:
    instances:
      userService:
        timeout-duration: 10s
        cancel-running-future: true
      productService:
        timeout-duration: 10s
        cancel-running-future: true
  circuitbreaker:
    instances:
      userService:
        register-health-indicator: true
        sliding-window-size: 30
        minimum-number-of-calls: 30
        failure-rate-threshold: 50
        wait-duration-in-open-state: 20000
        permitted-number-of-calls-in-half-open-state: 15
        sliding-window-type: COUNT_BASED
      productService:
        register-health-indicator: true
        sliding-window-size: 30
        minimum-number-of-calls: 30
        failure-rate-threshold: 50
        wait-duration-in-open-state: 20000
        permitted-number-of-calls-in-half-open-state: 15
        sliding-window-type: COUNT_BASED


#Axon configuration
axon:
  eventhandling:
    processors:
      order-group:
        mode: subscribing
  axonserver:
    servers: ${AXON_AXONSERVER_SERVERS:localhost:8124}


logging:
  level:
    org:
      axonframework:
        commandhandling: DEBUG
        messaging: DEBUG